# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for rally.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

---
release_group: null

labels:
  job:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled

images:
  tags:
    bootstrap: docker.io/xrally/xrally-openstack:2.0.0
    dep_check: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
    db_init: docker.io/openstackhelm/glance:wallaby-ubuntu_focal
    rally_db_sync: docker.io/xrally/xrally-openstack:2.0.0
    run_task: docker.io/xrally/xrally-openstack:2.0.0
    ks_user: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
    ks_service: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
    ks_endpoints: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
    image_repo_sync: docker.io/docker:17.07.0
  pull_policy: "IfNotPresent"
  local_registry:
    active: false
    exclude:
      - dep_check
      - image_repo_sync

enabled_tasks:
  # NOTE(alraddarla): not enabled
  # - ceilometerNOTE(alraddarla): not enabled
  - cinder
  - glance
  - keystone
  # NOTE(alraddarla): need a network setup in the gate to fully test
  - neutron
  - nova
  # NOTE(alraddarla): not enabled
  # - swift

pod:
  affinity:
    anti:
      type:
        default: preferredDuringSchedulingIgnoredDuringExecution
      topologyKey:
        default: kubernetes.io/hostname
      weight:
        default: 10
  mounts:
    rally_api:
      init_container: null
      rally_api:
        volumeMounts:
        volumes:
    rally_bootstrap:
      init_container: null
      rally_bootstrap:
        volumeMounts:
        volumes:
  resources:
    enabled: false
    jobs:
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_endpoints:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_service:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_user:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      manage_db:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      run_task:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      image_repo_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

bootstrap:
  enabled: false
  script: |
    openstack token issue

jobs:
  rally_task:
    cron: "*/59 * * * *"
    starting_deadline: 600
    history:
      success: 3
      failed: 1
  run_tasks:
    backoffLimit: 6
    restartPolicy: OnFailure

dependencies:
  dynamic:
    common:
      local_image_registry:
        jobs:
          - rally-image-repo-sync
        services:
          - endpoint: node
            service: local_image_registry
  static:
    db_init:
      services:
        - endpoint: internal
          service: oslo_db
    ks_endpoints:
      jobs:
        - rally-ks-service
      services:
        - endpoint: internal
          service: identity
    ks_service:
      services:
        - endpoint: internal
          service: identity
    ks_user:
      services:
        - endpoint: internal
          service: identity
    manage_db:
      jobs:
        - rally-ks-user
        - rally-ks-endpoints
        - rally-db-init
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: identity
    run_task:
      jobs:
        - rally-manage-db
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: identity
    image_repo_sync:
      services:
        - endpoint: internal
          service: local_image_registry

# Names of secrets used by bootstrap and environmental checks
secrets:
  identity:
    admin: rally-keystone-admin
    rally: rally-keystone-user
  oslo_db:
    admin: rally-db-admin
    rally: rally-db-user
  oci_image_registry:
    rally: rally-oci-image-registry
  tls:
    identity:
      api:
        public: keystone-tls-public
        internal: keystone-tls-api

endpoints:
  cluster_domain_suffix: cluster.local
  local_image_registry:
    name: docker-registry
    namespace: docker-registry
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        node: 5000
  oci_image_registry:
    name: oci-image-registry
    namespace: oci-image-registry
    auth:
      enabled: false
      rally:
        username: rally
        password: password
    hosts:
      default: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        default: null
  identity:
    name: keystone
    auth:
      admin:
        region_name: RegionOne
        username: admin
        password: password
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      rally:
        role: admin
        region_name: RegionOne
        username: rally
        password: password
        project_name: service
        user_domain_name: service
        project_domain_name: service
    hosts:
      default: keystone
      internal: keystone-api
    host_fqdn_override:
      default: null
    path:
      default: /v3
    scheme:
      default: http
    port:
      api:
        default: 80
        internal: 5000
  benchmark:
    name: rally
    hosts:
      default: rally-api
      public: rally
    host_fqdn_override:
      default: null
    path:
      default: /v1
    scheme:
      default: http
    port:
      api:
        default: 9312
        public: 80
  oslo_db:
    auth:
      admin:
        username: root
        password: password
      rally:
        username: rally
        password: password
    hosts:
      default: mariadb
    host_fqdn_override:
      default: null
    path: /rally
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
  oslo_cache:
    auth:
      keystone_authtoken:
        secret_key: null
    hosts:
      default: memcached
    host_fqdn_override:
      default: null
    port:
      memcache:
        default: 11211

pvc:
  name: pvc-rally
  requests:
    storage: 2Gi
  storage_class: general

conf:
  rally:
    keystone_authtoken:
      auth_type: password
      auth_version: v3
    rally_api:
      bind_port: 9312
    database:
      connection:
  rally_tasks:
    heat_tests:
      autoscaling_group:
        heat_template_version: '2013-05-23'
        outputs:
          scaling_url:
            value:
              get_attr:
                - scaling_policy
                - alarm_url
        parameters:
          flavor:
            constraints:
              - custom_constraint: nova.flavor
            default: m1.tiny
            type: string
          image:
            constraints:
              - custom_constraint: glance.image
            default: cirros-0.3.4-x86_64-uec
            type: string
          max_size:
            constraints:
              - range:
                  min: 1
            default: 5
            type: number
          scaling_adjustment:
            default: 1
            type: number
        resources:
          asg:
            properties:
              desired_capacity: 3
              max_size:
                get_param: max_size
              min_size: 1
              resource:
                properties:
                  flavor:
                    get_param: flavor
                  image:
                    get_param: image
                type: 'OS::Nova::Server'
            type: 'OS::Heat::AutoScalingGroup'
          scaling_policy:
            properties:
              adjustment_type: change_in_capacity
              auto_scaling_group_id:
                get_resource: asg
              scaling_adjustment:
                get_param: scaling_adjustment
            type: 'OS::Heat::ScalingPolicy'
      autoscaling_policy:
        heat_template_version: '2013-05-23'
        resources:
          test_group:
            properties:
              desired_capacity: 0
              max_size: 0
              min_size: 0
              resource:
                type: 'OS::Heat::RandomString'
            type: 'OS::Heat::AutoScalingGroup'
          test_policy:
            properties:
              adjustment_type: change_in_capacity
              auto_scaling_group_id:
                get_resource: test_group
              scaling_adjustment: 1
            type: 'OS::Heat::ScalingPolicy'
      default:
        heat_template_version: '2014-10-16'
      random_strings:
        description: Test template for rally create-update-delete scenario
        heat_template_version: '2014-10-16'
        resources:
          test_string_one:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
          test_string_two:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
      resource_group:
        description: Test template for rally create-update-delete scenario
        heat_template_version: '2014-10-16'
        resources:
          test_group:
            properties:
              count: 2
              resource_def:
                properties:
                  length: 20
                type: 'OS::Heat::RandomString'
            type: 'OS::Heat::ResourceGroup'
      resource_group_server_with_volume:
        description: |
          Test template that creates a resource group with servers and volumes.
          The template allows to create a lot of nested stacks with standard configuration:
          nova instance, cinder volume attached to that instance
        heat_template_version: '2014-10-16'
        parameters:
          instance_availability_zone:
            default: nova
            description: The Availability Zone to launch the instance.
            type: string
          instance_flavor:
            default: m1.tiny
            description: Type of the instance to be created.
            type: string
          instance_image:
            default: cirros-0.3.4-x86_64-uec
            type: string
          instance_volume_size:
            constraints:
              - range:
                  max: 1024
                  min: 1
            default: 1
            description: Size of volume to attach to instance
            type: number
          num_instances:
            constraints:
              - range:
                  min: 1
            description: number of instances that should be created in resource group
            type: number
        resources:
          group_of_volumes:
            properties:
              count:
                get_param: num_instances
              resource_def:
                properties:
                  availability_zone:
                    get_param: instance_availability_zone
                  flavor:
                    get_param: instance_flavor
                  image:
                    get_param: instance_image
                  volume_size:
                    get_param: instance_volume_size
                type: templates/server-with-volume.yaml.template
            type: 'OS::Heat::ResourceGroup'
      resource_group_with_constraint:
        description: Template for testing caching.
        heat_template_version: '2013-05-23'
        parameters:
          count:
            default: 40
            type: number
          delay:
            default: 0.1
            type: number
        resources:
          rg:
            properties:
              count:
                get_param: count
              resource_def:
                properties:
                  constraint_prop_secs:
                    get_param: delay
                type: 'OS::Heat::TestResource'
            type: 'OS::Heat::ResourceGroup'
      resource_group_with_outputs:
        heat_template_version: '2013-05-23'
        outputs:
          val1:
            value:
              get_attr:
                - rg
                - resource.0.output
          val10:
            value:
              get_attr:
                - rg
                - resource.9.output
          val2:
            value:
              get_attr:
                - rg
                - resource.1.output
          val3:
            value:
              get_attr:
                - rg
                - resource.2.output
          val4:
            value:
              get_attr:
                - rg
                - resource.3.output
          val5:
            value:
              get_attr:
                - rg
                - resource.4.output
          val6:
            value:
              get_attr:
                - rg
                - resource.5.output
          val7:
            value:
              get_attr:
                - rg
                - resource.6.output
          val8:
            value:
              get_attr:
                - rg
                - resource.7.output
          val9:
            value:
              get_attr:
                - rg
                - resource.8.output
        parameters:
          attr_wait_secs:
            default: 0.5
            type: number
        resources:
          rg:
            properties:
              count: 10
              resource_def:
                properties:
                  attr_wait_secs:
                    get_param: attr_wait_secs
                type: 'OS::Heat::TestResource'
            type: 'OS::Heat::ResourceGroup'
      server_with_ports:
        heat_template_version: '2013-05-23'
        parameters:
          cidr:
            default: 11.11.11.0/24
            type: string
          flavor:
            default: m1.tiny
            type: string
          image:
            default: cirros-0.3.4-x86_64-uec
            type: string
          public_net:
            default: public
            type: string
        resources:
          port_security_group:
            properties:
              description: |
                Default security group assigned to port. The neutron default group
                is not used because neutron creates several groups with the same name=default
                and nova cannot chooses which one should it use.
              name: default_port_security_group
            type: 'OS::Neutron::SecurityGroup'
          private_net:
            type: 'OS::Neutron::Net'
          private_subnet:
            properties:
              cidr:
                get_param: cidr
              network:
                get_resource: private_net
            type: 'OS::Neutron::Subnet'
          router:
            properties:
              external_gateway_info:
                network:
                  get_param: public_net
            type: 'OS::Neutron::Router'
          router_interface:
            properties:
              router_id:
                get_resource: router
              subnet_id:
                get_resource: private_subnet
            type: 'OS::Neutron::RouterInterface'
          server:
            properties:
              flavor:
                get_param: flavor
              image:
                get_param: image
              networks:
                - port:
                    get_resource: server_port
            type: 'OS::Nova::Server'
          server_port:
            properties:
              fixed_ips:
                - subnet:
                    get_resource: private_subnet
              network:
                get_resource: private_net
              security_groups:
                - get_resource: port_security_group
            type: 'OS::Neutron::Port'
      server_with_volume:
        heat_template_version: '2013-05-23'
        parameters:
          availability_zone:
            default: nova
            description: The Availability Zone to launch the instance.
            type: string
          flavor:
            default: m1.tiny
            type: string
          image:
            default: cirros-0.3.4-x86_64-uec
            type: string
          volume_size:
            constraints:
              - description: must be between 1 and 1024 Gb.
                range:
                  max: 1024
                  min: 1
            default: 1
            description: Size of the volume to be created.
            type: number
        resources:
          cinder_volume:
            properties:
              availability_zone:
                get_param: availability_zone
              size:
                get_param: volume_size
            type: 'OS::Cinder::Volume'
          server:
            properties:
              flavor:
                get_param: flavor
              image:
                get_param: image
            type: 'OS::Nova::Server'
          volume_attachment:
            properties:
              instance_uuid:
                get_resource: server
              mountpoint: /dev/vdc
              volume_id:
                get_resource: cinder_volume
            type: 'OS::Cinder::VolumeAttachment'
      updated_random_strings_add:
        description: |
          Test template for create-update-delete-stack scenario in rally. The
          template updates the stack defined by random-strings.yaml.template with additional
          resource.
        heat_template_version: '2014-10-16'
        resources:
          test_string_one:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
          test_string_three:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
          test_string_two:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
      updated_random_strings_delete:
        description: |
          Test template for create-update-delete-stack scenario in rally. The
          template deletes one resource from the stack defined by random-strings.yaml.template.
        heat_template_version: '2014-10-16'
        resources:
          test_string_one:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
      updated_random_strings_replace:
        description: |
          Test template for create-update-delete-stack scenario in rally. The
          template deletes one resource from the stack defined by random-strings.yaml.template
          and re-creates it with the updated parameters (so-called update-replace). That happens
          because some parameters cannot be changed without resource re-creation. The template
          allows to measure performance of update-replace operation.
        heat_template_version: '2014-10-16'
        resources:
          test_string_one:
            properties:
              length: 20
            type: 'OS::Heat::RandomString'
          test_string_two:
            properties:
              length: 40
            type: 'OS::Heat::RandomString'
      updated_resource_group_increase:
        description: |
          Test template for create-update-delete-stack scenario in rally. The
          template updates one resource from the stack defined by resource-group.yaml.template
          and adds children resources to that resource.
        heat_template_version: '2014-10-16'
        resources:
          test_group:
            properties:
              count: 3
              resource_def:
                properties:
                  length: 20
                type: 'OS::Heat::RandomString'
            type: 'OS::Heat::ResourceGroup'
      updated_resource_group_reduce:
        description: |
          Test template for create-update-delete-stack scenario in rally.
          The template updates one resource from the stack defined by resource-group.yaml.template
          and deletes children resources from that resource.
        heat_template_version: '2014-10-16'
        resources:
          test_group:
            properties:
              count: 1
              resource_def:
                properties:
                  length: 20
                type: 'OS::Heat::RandomString'
            type: 'OS::Heat::ResourceGroup'
    authenticate_task:
      Authenticate.keystone:
        -
          context:
            users:
              tenants: 3
              users_per_tenant: 50
          runner:
            concurrency: 5
            times: 100
            type: constant
      # NOTE(alraddarla): not enabled yet
      # Authenticate.validate_ceilometer:
      #   -
      #     args:
      #       repetitions: 2
      #     context:
      #       users:
      #         tenants: 3
      #         users_per_tenant: 5
      #     runner:
      #       concurrency: 5
      #       times: 10
      #       type: constant
      Authenticate.validate_cinder:
        -
          args:
            repetitions: 2
          context:
            users:
              tenants: 3
              users_per_tenant: 5
          runner:
            concurrency: 5
            times: 10
            type: constant
      Authenticate.validate_glance:
        -
          args:
            repetitions: 2
          context:
            users:
              tenants: 3
              users_per_tenant: 5
          runner:
            concurrency: 5
            times: 10
            type: constant
      Authenticate.validate_neutron:
        -
          args:
            repetitions: 2
          context:
            users:
              tenants: 3
              users_per_tenant: 5
          runner:
            concurrency: 5
            times: 10
            type: constant
      Authenticate.validate_nova:
        -
          args:
            repetitions: 2
          context:
            users:
              tenants: 3
              users_per_tenant: 5
          runner:
            concurrency: 5
            times: 10
            type: constant
    cinder_task:
      CinderVolumeTypes.create_and_delete_volume_type:
        -
          args: {}
          context:
            users:
              tenants: 2
              users_per_tenant: 2
          runner:
            concurrency: 2
            times: 5
            type: constant
          sla:
            failure_rate:
              max: 0
    glance_task:
      GlanceImages.create_and_list_image:
        -
          args:
            container_format: bare
            disk_format: qcow2
            image_location: "http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img"
          context:
            users:
              tenants: 1
              users_per_tenant: 1
          runner:
            concurrency: 1
            times: 10
            type: constant
    keystone_task:
      KeystoneBasic.add_and_remove_user_role:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.authenticate_user_and_validate_token:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_add_and_list_user_roles:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_ec2credential:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0

      KeystoneBasic.create_and_list_ec2credentials:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_role:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_service:
        - args:
            description: test_description
            service_type: Rally_test_type
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_get_role:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_services:
        - args:
            description: test_description
            service_type: Rally_test_type
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_tenants:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_users:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_delete_user:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_tenant:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_tenant_with_users:
        - args:
            users_per_tenant: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_update_and_delete_tenant:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user_set_enabled_and_delete:
        - args:
            enabled: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
        - args:
            enabled: false
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user_update_password:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.get_entities:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
    neutron_task:
      NeutronNetworks.create_and_delete_networks:
        - args:
            network_create_args: {}
          context:
            quotas:
              neutron:
                network: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_delete_ports:
        - args:
            network_create_args: {}
            port_create_args: {}
            ports_per_network: 10
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                port: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_delete_routers:
        - args:
            network_create_args: {}
            router_create_args: {}
            subnet_cidr_start: 1.1.0.0/30
            subnet_create_args: {}
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                router: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_delete_subnets:
        - args:
            network_create_args: {}
            subnet_cidr_start: 1.1.0.0/30
            subnet_create_args: {}
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_list_routers:
        - args:
            network_create_args: {}
            router_create_args: {}
            subnet_cidr_start: 1.1.0.0/30
            subnet_create_args: {}
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                router: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_list_subnets:
        - args:
            network_create_args: {}
            subnet_cidr_start: 1.1.0.0/30
            subnet_create_args: {}
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_show_network:
        - args:
            network_create_args: {}
          context:
            quotas:
              neutron:
                network: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_update_networks:
        - args:
            network_create_args: {}
            network_update_args:
              admin_state_up: false
          context:
            quotas:
              neutron:
                network: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_update_ports:
        - args:
            network_create_args: {}
            port_create_args: {}
            port_update_args:
              admin_state_up: false
              device_id: dummy_id
              device_owner: dummy_owner
            ports_per_network: 5
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                port: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_update_routers:
        - args:
            network_create_args: {}
            router_create_args: {}
            router_update_args:
              admin_state_up: false
            subnet_cidr_start: 1.1.0.0/30
            subnet_create_args: {}
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                router: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.create_and_update_subnets:
        - args:
            network_create_args: {}
            subnet_cidr_start: 1.4.0.0/16
            subnet_create_args: {}
            subnet_update_args:
              enable_dhcp: false
            subnets_per_network: 2
          context:
            network: {}
            quotas:
              neutron:
                network: -1
                subnet: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronNetworks.list_agents:
        - args:
            agent_args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronSecurityGroup.create_and_list_security_groups:
        - args:
            security_group_create_args: {}
          context:
            quotas:
              neutron:
                security_group: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NeutronSecurityGroup.create_and_update_security_groups:
        - args:
            security_group_create_args: {}
            security_group_update_args: {}
          context:
            quotas:
              neutron:
                security_group: -1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
    nova_task:
      NovaAggregates.create_and_get_aggregate_details:
        - args:
            availability_zone: nova
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaAggregates.create_and_update_aggregate:
        - args:
            availability_zone: nova
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaAggregates.list_aggregates:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaAvailabilityZones.list_availability_zones:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.create_and_delete_flavor:
        - args:
            disk: 1
            ram: 500
            vcpus: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.create_and_list_flavor_access:
        - args:
            disk: 1
            ram: 500
            vcpus: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.create_flavor:
        - args:
            disk: 1
            ram: 500
            vcpus: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.create_flavor_and_add_tenant_access:
        - args:
            disk: 1
            ram: 500
            vcpus: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.create_flavor_and_set_keys:
        - args:
            disk: 1
            extra_specs:
              'quota:disk_read_bytes_sec': 10240
            ram: 500
            vcpus: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaFlavors.list_flavors:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaHypervisors.list_and_get_hypervisors:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaHypervisors.list_and_get_uptime_hypervisors:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaHypervisors.list_and_search_hypervisors:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaHypervisors.list_hypervisors:
        - args:
            detailed: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaHypervisors.statistics_hypervisors:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaKeypair.create_and_delete_keypair:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaKeypair.create_and_list_keypairs:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaServerGroups.create_and_list_server_groups:
        - args:
            all_projects: false
            kwargs:
              policies:
                - affinity
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      NovaServices.list_services:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0

# NOTE(helm_hook): helm_hook might break for helm2 binary.
# set helm3_hook: false when using the helm2 binary.
helm3_hook: true

tls:
  identity: false

manifests:
  configmap_bin: true
  configmap_etc: true
  configmap_tasks: true
  configmap_test_templates: true
  job_bootstrap: true
  job_db_init: true
  job_image_repo_sync: true
  job_ks_endpoints: true
  job_ks_service: true
  job_ks_user: true
  job_manage_db: true
  job_run_task: true
  pvc_rally: true
  secret_db: true
  secret_keystone: true
  secret_registry: true
...
